package com.pros.currencyconversionbase.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.pros.currencyconversionbase.util.PatternUtil;
import com.pros.currencyconversionbase.validation.ValidCurrency;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.mapping.Document;

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.Instant;


/**
 * @author aldonavarreteluna
 * @version 1.0.0
 * @since 2023-12-30
 *  Exchange rate model.
 */
@Data
@Document(collection = "exchange_rate")
@CompoundIndex(def = "{'sourceCurrency': 1, 'targetCurrency': 1, 'effectiveStartDate': 1}", unique = true)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ExchangeRate implements Serializable {

    @Schema(description = "Exchange rate id.(This is auto generated by MongoDB)", name = "id", example = "658e3847597eda2faeabbd09", required = true)
    @Id
    @JsonProperty("id")
    private String id;

    @Schema(description = "Source currency code.", name = "sourceCurrency", example = "EUR")
    @NotNull(message = "{sourceCurrency.notNull}")
    @Pattern(regexp = PatternUtil.CURRENCY_PATTERN, message = "{sourceCurrency.notValid}")
    @ValidCurrency(message = "{sourceCurrency.notValid}")
    @JsonProperty("sourceCurrency")
    private String sourceCurrency;

    @Schema(description = "Target currency code.", name = "targetCurrency", example = "USD")
    @NotNull(message = "{targetCurrency.notNull}")
    @Pattern(regexp = PatternUtil.CURRENCY_PATTERN, message = "{targetCurrency.notValid}")
    @ValidCurrency(message = "{targetCurrency.notValid}")
    @JsonProperty("targetCurrency")
    private String targetCurrency;

    @Schema(description = "Exchange rate.", name = "exchangeRate", example = "1.123456789")
    @NotNull(message = "{exchangeRate.notNull}")
    @DecimalMin(value = "0.0000000001", message = "{exchangeRate.greaterThanZero}")
    @JsonProperty("exchangeRate")
    private BigDecimal exchangeRate;

    @Schema(description = "Effective start date.", name = "effectiveStartDate", example = "2022-07-01T00:00:00Z")
    @NotNull(message = "{effectiveStartDate.notNull}")
    @JsonProperty("effectiveStartDate")
    private Instant effectiveStartDate;

}
